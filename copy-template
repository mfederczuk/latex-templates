#!/bin/sh
# -*- sh -*-
# vim: syntax=sh
# code: language=shellscript

# Copyright (c) 2023 Michael Federczuk
# SPDX-License-Identifier: MPL-2.0 AND Apache-2.0

#region preamble

case "$-" in
	(*'i'*)
		\command printf 'script was called interactively\n' >&2
		return 124
		;;
esac

set -o errexit
set -o nounset

# enabling POSIX-compliant behavior for GNU programs
export POSIXLY_CORRECT=yes POSIX_ME_HARDER=yes

if [ "${0#/}" = "$0" ]; then
	argv0="$0"
else
	argv0="$(basename -- "$0" && printf x)"
	argv0="${argv0%"$(printf '\nx')"}"
fi
readonly argv0

#endregion

#region args

print_usage() {
	printf 'usage: %s <template_source> <target>\n' "$argv0"
	printf '   or: %s --list\n' "$argv0"
}

for arg in "$@"; do
	if [ "$arg" = '--help' ]; then
		print_usage
		exit
	fi
done; unset -v arg

list_standard_templates=false

case $# in
	(0)
		{
			printf '%s: missing arguments: (--list | <template_source> <target>)\n' "$argv0"
			print_usage
		} >&2
		exit 3
		;;
	(1)
		if [ "$1" != '--list' ]; then
			{
				printf '%s: missing argument: <target>\n' "$argv0"
				print_usage
			} >&2
			exit 3
		fi

		list_standard_templates=true
		;;
	(2)
		if [ "$1" = '--list' ]; then
			{
				printf '%s: too many arguments: %i\n' "$argv0" $(($# - 1))
				print_usage
			} >&2
			exit 4
		fi

		if [ -z "$1" ]; then
			{
				printf '%s: argument 1: must not be empty\n' "$argv0"
				print_usage
			} >&2
			exit 9
		fi
		if [ -z "$2" ]; then
			{
				printf '%s: argument 2: must not be empty\n' "$argv0"
				print_usage
			} >&2
			exit 9
		fi

		template_source="$1"
		target_file_pathname="$2"
		;;
	(*)
		if [ "$1" = '--list' ]; then
			expected_argc=1
		else
			expected_argc=2
		fi
		readonly expected_argc

		{
			printf '%s: too many arguments: %i\n' "$argv0" $(($# - expected_argc))
			print_usage
		} >&2
		exit 4
		;;
esac

readonly list_standard_templates \
         template_source target_file_pathname

unset -f print_usage

#endregion

print_xdg_data_home_pathname() {
	# <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>

	if [ "${XDG_DATA_HOME-#"/"}" != "$XDG_DATA_HOME" ]; then
		# only absolute pathnames are valid
		printf '%s' "$XDG_DATA_HOME"
		return
	fi

	if [ -z "${HOME-}" ]; then
		printf '%s: the environment variable HOME must not be unset or empty\n' "$argv0" >&2
		return 48
	fi

	if [ "${HOME#"/"}" = "$HOME" ]; then
		printf '%s: the environment variable HOME must be absolute\n' "$argv0" >&2
		return 49
	fi

	printf '%s/.local/share' "$HOME"
}

print_valid_standard_templates_dir_pathname() {
	set -- "$(print_xdg_data_home_pathname && printf x)"
	set -- "${1%"x"}"
	set -- "$1/latex-templates/templates"

	if [ -e "$1" ] && [ ! -d "$1" ]; then
		printf '%s: %s: not a directory\n' "$argv0" "$1" >&2
		exit 24
	fi

	printf '%s' "$1"
}


if $list_standard_templates; then
	standard_templates_dir_pathname="$(print_valid_standard_templates_dir_pathname)"
	readonly standard_templates_dir_pathname

	printf '%s:\n' "$standard_templates_dir_pathname"

	if [ ! -e "$standard_templates_dir_pathname" ]; then
		exit
	fi

	(
		cd "$standard_templates_dir_pathname"
		printf '%s\n' ./*.tex | sed -e s%'^\./\(..*\)\.tex$'%'\1'%
	)
	exit
fi


#region checking source & target

if printf '%s' "$template_source" | grep -Eq '/'; then
	template_file_pathname="$template_source"
else
	standard_templates_dir_pathname="$(print_valid_standard_templates_dir_pathname)"

	template_file_pathname="$standard_templates_dir_pathname/$template_source.tex"

	unset -v standard_templates_dir_pathname
fi
readonly template_file_pathname

if [ ! -e "$template_file_pathname" ]; then
	printf '%s: %s: no such file\n' "$argv0" "$template_file_pathname" >&2
	exit 24
fi
if [ ! -f "$template_file_pathname" ]; then
	printf '%s: %s: not a regular file\n' "$argv0" "$template_file_pathname"
	exit 24
fi


if [ -e "$target_file_pathname" ] && [ ! -f "$target_file_pathname" ]; then
	printf '%s: %s: not a regular file\n' "$argv0" "$target_file_pathname" >&2
	exit 26
fi

#endregion

#region copying template

day="$(date +%d)"
month="$(date +%m)"
year="$(date +%Y)"
readonly day month year

sed /'^[[:space:]]*%%'/d\;s/'[[:space:]]*%%.*$'//\;s/'<DAY>'/"$day"/g\;s/'<MONTH>'/"$month"/g\;s/'<YEAR>'/"$year"/g "$template_file_pathname" > "$target_file_pathname"

#endregion
